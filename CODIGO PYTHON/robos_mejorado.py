# -*- coding: utf-8 -*-
"""ROBOS MEJORADO

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GBLxAWXlmEwTisc5KNvh3__to-IDPrz6

PREDICCIÓN GENERAL PARA 2025 DE ROBADOS Y RECUPERADOS EN ARGENTINA
"""

import pandas as pd
import matplotlib.pyplot as plt
from prophet import Prophet

# 1. Cargar datos
df = pd.read_csv("ROBOS_MEJORADO")  # Cambiar si es necesario
df["tramite_fecha"] = pd.to_datetime(df["tramite_fecha"], errors='coerce')
df = df.dropna(subset=["tramite_fecha", "tramite_tipo"])

# 2. Función para preparar y predecir con Prophet
def predecir_con_prophet(df, tramite_tipo, titulo):
    df_tipo = df[df["tramite_tipo"].str.upper() == tramite_tipo.upper()]
    df_tipo["fecha"] = df_tipo["tramite_fecha"].dt.to_period("M").dt.to_timestamp()
    df_mensual = df_tipo.groupby("fecha").size().reset_index(name="y")
    df_mensual.rename(columns={"fecha": "ds"}, inplace=True)

    if len(df_mensual) < 24:
        print(f"No hay suficientes datos para {titulo}")
        return None

    # Entrenar Prophet
    modelo = Prophet()
    modelo.fit(df_mensual)

    # Generar fechas futuras para todo el año 2025
    futuro = modelo.make_future_dataframe(periods=12, freq="MS")  # Generamos para todo el año 2025
    prediccion = modelo.predict(futuro)

    # Filtrar solo 2025
    pred_2025 = prediccion[prediccion["ds"].dt.year == 2025]
    pred_2025["mes"] = pred_2025["ds"].dt.strftime("%B")
    pred_2025["mes"] = pd.Categorical(pred_2025["mes"], categories=[
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
    ], ordered=True)
    pred_2025 = pred_2025.sort_values("mes")

    # Sumar los valores para todo el año 2025
    total_2025 = pred_2025["yhat"].sum()

    # Crear tabla de resultados
    tabla = pd.DataFrame({
        "Mes": pred_2025["mes"].values,
        f"{titulo} estimados por mes": pred_2025["yhat"].round().astype(int)
    })

    # Mostrar la predicción total para 2025
    print(f"\n--- {titulo.upper()} TOTAL ESTIMADOS PARA 2025 ---")
    print(f"Total {titulo} estimados para 2025: {total_2025:.0f}")
    print(tabla.to_string(index=False))

    # Histograma horizontal de los robos o recuperados por mes
    plt.figure(figsize=(10, 6))
    plt.barh(tabla["Mes"], tabla[f"{titulo} estimados por mes"], color='lightcoral' if titulo == "Robos" else 'mediumseagreen')
    plt.title(f"{titulo} estimados por mes - Año 2025")
    plt.xlabel("Cantidad")
    plt.ylabel("Mes")
    plt.tight_layout()
    plt.gca().invert_yaxis()
    plt.grid(axis='x')
    plt.show()

    return total_2025, tabla

# 3. Ejecutar la predicción de robos y recuperaciones
total_robos, tabla_robos = predecir_con_prophet(df, "ROBADO", "Robos")
total_recup, tabla_recup = predecir_con_prophet(df, "RECUPERADO", "Recuperados")

# Mostrar totales de robos y recuperaciones
print(f"\nTotal de robos estimados para 2025: {total_robos:.0f}")
print(f"Total de recuperaciones estimadas para 2025: {total_recup:.0f}")

"""PREDICCIÓN POR MESES PARA 2025 DE ROBADOS Y RECUPERADOS EN ARGENTINA"""

import pandas as pd
import matplotlib.pyplot as plt
from prophet import Prophet

# 1. Cargar datos
df = pd.read_csv("ROBOS_MEJORADO")  # Cambiar si es necesario
df["tramite_fecha"] = pd.to_datetime(df["tramite_fecha"], errors='coerce')
df = df.dropna(subset=["tramite_fecha", "tramite_tipo"])

# 2. Función para preparar y predecir con Prophet
def predecir_con_prophet(df, tramite_tipo, titulo):
    df_tipo = df[df["tramite_tipo"].str.upper() == tramite_tipo.upper()]
    df_tipo["fecha"] = df_tipo["tramite_fecha"].dt.to_period("M").dt.to_timestamp()
    df_mensual = df_tipo.groupby("fecha").size().reset_index(name="y")
    df_mensual.rename(columns={"fecha": "ds"}, inplace=True)

    if len(df_mensual) < 24:
        print(f"No hay suficientes datos para {titulo}")
        return None

    # Entrenar Prophet
    modelo = Prophet()
    modelo.fit(df_mensual)

    # Generar fechas futuras para 2025
    futuro = modelo.make_future_dataframe(periods=12, freq="MS")
    prediccion = modelo.predict(futuro)

    # Filtrar solo 2025
    pred_2025 = prediccion[prediccion["ds"].dt.year == 2025]
    pred_2025["mes"] = pred_2025["ds"].dt.strftime("%B")
    pred_2025["mes"] = pd.Categorical(pred_2025["mes"], categories=[
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
    ], ordered=True)
    pred_2025 = pred_2025.sort_values("mes")

    # Crear tabla
    tabla = pd.DataFrame({
        "Mes": pred_2025["mes"].values,
        f"{titulo} estimados": pred_2025["yhat"].round().astype(int)
    })

    # Mostrar tabla
    print(f"\n--- {titulo.upper()} ESTIMADOS PARA 2025 ---")
    print(tabla.to_string(index=False))

    # Histograma horizontal
    plt.figure(figsize=(10, 6))
    plt.barh(tabla["Mes"], tabla[f"{titulo} estimados"], color='lightcoral' if titulo == "Robos" else 'mediumseagreen')
    plt.title(f"{titulo} estimados por mes - Año 2025")
    plt.xlabel("Cantidad")
    plt.ylabel("Mes")
    plt.tight_layout()
    plt.gca().invert_yaxis()
    plt.grid(axis='x')
    plt.show()

    return tabla

# 3. Ejecutar
tabla_robos = predecir_con_prophet(df, "ROBADO", "Robos")
tabla_recup = predecir_con_prophet(df, "RECUPERADO", "Recuperados")

"""PREDICCIÓN DE ROBADOS Y RECUPERADOS CON PROPHET"""

import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt

# 1. Cargar los datos
df = pd.read_csv("ROBOS_MEJORADO")  # Cambiar si el archivo tiene otro nombre
df["tramite_fecha"] = pd.to_datetime(df["tramite_fecha"], errors='coerce')
df = df.dropna(subset=["tramite_fecha"])

# 2. Agregar columnas año y mes
df["anio"] = df["tramite_fecha"].dt.year
df["mes"] = df["tramite_fecha"].dt.month

# 3. Filtrar por tipo de trámite
df_robado = df[df["tramite_tipo"].str.upper() == "ROBADO"]
df_recup = df[df["tramite_tipo"].str.upper() == "RECUPERADO"]

# 4. Agrupar por mes
def preparar_datos_prophet(df_tipo):
    df_tipo = df_tipo.copy()
    df_tipo["fecha"] = pd.to_datetime(df_tipo["tramite_fecha"].dt.to_period("M").astype(str))  # Primer día del mes
    df_mensual = df_tipo.groupby("fecha").size().reset_index(name="y")
    df_mensual.rename(columns={"fecha": "ds"}, inplace=True)
    return df_mensual

df_robos_mensual = preparar_datos_prophet(df_robado)
df_recup_mensual = preparar_datos_prophet(df_recup)

# 5. Función para entrenar y graficar como histograma
def predecir_prophet_histograma(df_mensual, titulo):
    m = Prophet()
    m.fit(df_mensual)

    future = m.make_future_dataframe(periods=12, freq='MS')
    forecast = m.predict(future)

    forecast_2025 = forecast[forecast["ds"].dt.year == 2025][["ds", "yhat"]]
    forecast_2025["yhat"] = forecast_2025["yhat"].round().astype(int)
    forecast_2025["Mes"] = forecast_2025["ds"].dt.strftime("%B")

    tabla = forecast_2025[["Mes", "yhat"]].rename(columns={"yhat": f"{titulo} estimados"})

    print(f"\n--- {titulo.upper()} ESTIMADOS PARA 2025 (PROPHET) ---")
    print(tabla.to_string(index=False))

    # Histograma
    plt.figure(figsize=(10, 5))
    plt.bar(tabla["Mes"], tabla[f"{titulo} estimados"], color='orange', edgecolor='black')
    plt.title(f"{titulo} estimados por mes en 2025 (modelo Prophet)")
    plt.xlabel("Mes")
    plt.ylabel("Cantidad estimada")
    plt.xticks(rotation=45)
    plt.grid(axis="y")
    plt.tight_layout()
    plt.show()

    return tabla

# 6. Ejecutar para Robos y Recuperados
tabla_robos = predecir_prophet_histograma(df_robos_mensual, "Robos")
tabla_recup = predecir_prophet_histograma(df_recup_mensual, "Recuperados")

"""PREDICCIÓN POR PROVINCIAS PARA 2025 DE ROBADOS Y RECUPERADOS EN ARGENTINA"""

import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt

# 1. Cargar datos
df = pd.read_csv("ROBOS_MEJORADO")  # Cambiar si es necesario
df["tramite_fecha"] = pd.to_datetime(df["tramite_fecha"], errors='coerce')
df = df.dropna(subset=["tramite_fecha", "registro_seccional_provincia"])

# 2. Función para preparar y predecir por provincia
def predecir_por_provincia(df, tramite_tipo):
    df_tipo = df[df["tramite_tipo"].str.upper() == tramite_tipo.upper()]
    df_tipo["fecha"] = df_tipo["tramite_fecha"].dt.to_period("M").dt.to_timestamp()

    resultados = []

    for provincia in df_tipo["registro_seccional_provincia"].unique():
        df_prov = df_tipo[df_tipo["registro_seccional_provincia"] == provincia]
        df_mensual = df_prov.groupby("fecha").size().reset_index(name="y")
        df_mensual.rename(columns={"fecha": "ds"}, inplace=True)

        if len(df_mensual) < 24:
            continue  # Saltar si hay pocos datos

        try:
            modelo = Prophet()
            modelo.fit(df_mensual)

            futuro = modelo.make_future_dataframe(periods=12, freq="MS")
            prediccion = modelo.predict(futuro)

            pred_2025 = prediccion[prediccion["ds"].dt.year == 2025]
            total_2025 = pred_2025["yhat"].sum().round()

            resultados.append({
                "Provincia": provincia,
                f"{tramite_tipo} 2025 estimado": int(total_2025)
            })
        except:
            continue  # Si falla, pasa a la siguiente

    return pd.DataFrame(resultados).sort_values(by=f"{tramite_tipo} 2025 estimado", ascending=False)

# 3. Ejecutar para robos y recuperaciones
tabla_robos = predecir_por_provincia(df, "ROBADO")
tabla_recup = predecir_por_provincia(df, "RECUPERADO")

# 4. Unir tablas
tabla_final = pd.merge(tabla_robos, tabla_recup, on="Provincia", how="outer").fillna(0).astype({ "ROBADO 2025 estimado": int, "RECUPERADO 2025 estimado": int })

# 5. Mostrar la predicción total por provincia para 2025
print("\n--- PREDICCIÓN TOTAL POR PROVINCIA PARA 2025 ---")
print(tabla_final.to_string(index=False))

# 6. Crear histogramas de barras horizontales
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 8))

# Histograma de robos
ax1.barh(tabla_final["Provincia"], tabla_final["ROBADO 2025 estimado"], color='orange')
ax1.set_title("Robos Estimados por Provincia (2025)")
ax1.set_xlabel("Cantidad de Robos")
ax1.set_ylabel("Provincia")

# Histograma de recuperaciones
ax2.barh(tabla_final["Provincia"], tabla_final["RECUPERADO 2025 estimado"], color='skyblue')
ax2.set_title("Recuperados Estimados por Provincia (2025)")
ax2.set_xlabel("Cantidad de Recuperados")
ax2.set_ylabel("Provincia")

plt.tight_layout()
plt.show()

"""PREDICCIÓN POR TIPO DE VEHÍCULO PARA 2025 DE ROBADOS Y RECUPERADOS EN ARGENTINA"""

import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt

# 1. Cargar datos
df = pd.read_csv("ROBOS_MEJORADO")  # Cambiar si es necesario
df["tramite_fecha"] = pd.to_datetime(df["tramite_fecha"], errors='coerce')
df = df.dropna(subset=["tramite_fecha", "automotor_tipo_descripcion"])

# 2. Función para predecir por tipo de automotor
def predecir_por_tipo(df, tramite_tipo):
    df_tipo = df[df["tramite_tipo"].str.upper() == tramite_tipo.upper()]
    df_tipo["fecha"] = df_tipo["tramite_fecha"].dt.to_period("M").dt.to_timestamp()

    resultados = []

    for tipo in df_tipo["automotor_tipo_descripcion"].dropna().unique():
        df_tipo_auto = df_tipo[df_tipo["automotor_tipo_descripcion"] == tipo]
        df_mensual = df_tipo_auto.groupby("fecha").size().reset_index(name="y")
        df_mensual.rename(columns={"fecha": "ds"}, inplace=True)

        if len(df_mensual) < 24:
            continue

        try:
            modelo = Prophet()
            modelo.fit(df_mensual)

            futuro = modelo.make_future_dataframe(periods=12, freq="MS")
            prediccion = modelo.predict(futuro)

            pred_2025 = prediccion[prediccion["ds"].dt.year == 2025]
            total_2025 = pred_2025["yhat"].sum().round()

            resultados.append({
                "Tipo de Vehículo": tipo,
                f"{tramite_tipo} 2025 estimado": int(total_2025)
            })
        except:
            continue

    return pd.DataFrame(resultados).sort_values(by=f"{tramite_tipo} 2025 estimado", ascending=False)

# 3. Ejecutar para robos y recuperaciones
tabla_robos = predecir_por_tipo(df, "ROBADO")
tabla_recup = predecir_por_tipo(df, "RECUPERADO")

# 4. Unir tablas
tabla_final = pd.merge(tabla_robos, tabla_recup, on="Tipo de Vehículo", how="outer").fillna(0).astype({
    "ROBADO 2025 estimado": int,
    "RECUPERADO 2025 estimado": int
})

# 5. Mostrar resultados
print("\n--- PREDICCIÓN TOTAL POR TIPO DE VEHÍCULO PARA 2025 ---")
print(tabla_final.to_string(index=False))

# 6. Crear histogramas horizontales
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 8))

# Histograma de robos
ax1.barh(tabla_final["Tipo de Vehículo"], tabla_final["ROBADO 2025 estimado"], color='red')
ax1.set_title("Robos Estimados por Tipo de Vehículo (2025)")
ax1.set_xlabel("Cantidad de Robos")
ax1.set_ylabel("Tipo de Vehículo")

# Histograma de recuperaciones
ax2.barh(tabla_final["Tipo de Vehículo"], tabla_final["RECUPERADO 2025 estimado"], color='green')
ax2.set_title("Recuperados Estimados por Tipo de Vehículo (2025)")
ax2.set_xlabel("Cantidad de Recuperados")
ax2.set_ylabel("Tipo de Vehículo")

plt.tight_layout()
plt.show()

"""PREDICCIÓN POR MARCA PARA 2025 DE ROBADOS Y RECUPERADOS EN ARGENTINA"""

import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt

# 1. Cargar datos
df = pd.read_csv("ROBOS_MEJORADO")  # Cambiar el nombre del archivo si es necesario
df["tramite_fecha"] = pd.to_datetime(df["tramite_fecha"], errors='coerce')
df = df.dropna(subset=["tramite_fecha", "automotor_marca_descripcion"])

# 2. Función para predecir por marca de automotor
def predecir_por_marca(df, tramite_tipo):
    df_tipo = df[df["tramite_tipo"].str.upper() == tramite_tipo.upper()]
    df_tipo["fecha"] = df_tipo["tramite_fecha"].dt.to_period("M").dt.to_timestamp()

    resultados = []

    for marca in df_tipo["automotor_marca_descripcion"].dropna().unique():
        df_marca = df_tipo[df_tipo["automotor_marca_descripcion"] == marca]
        df_mensual = df_marca.groupby("fecha").size().reset_index(name="y")
        df_mensual.rename(columns={"fecha": "ds"}, inplace=True)

        if len(df_mensual) < 24:
            continue

        try:
            modelo = Prophet()
            modelo.fit(df_mensual)

            futuro = modelo.make_future_dataframe(periods=12, freq="MS")
            prediccion = modelo.predict(futuro)

            pred_2025 = prediccion[prediccion["ds"].dt.year == 2025]
            total_2025 = pred_2025["yhat"].sum().round()

            resultados.append({
                "Marca de Vehículo": marca,
                f"{tramite_tipo} 2025 estimado": int(total_2025)
            })
        except:
            continue

    return pd.DataFrame(resultados).sort_values(by=f"{tramite_tipo} 2025 estimado", ascending=False)

# 3. Ejecutar para robos y recuperaciones
tabla_robos = predecir_por_marca(df, "ROBADO")
tabla_recup = predecir_por_marca(df, "RECUPERADO")

# 4. Unir tablas
tabla_final = pd.merge(tabla_robos, tabla_recup, on="Marca de Vehículo", how="outer").fillna(0).astype({
    "ROBADO 2025 estimado": int,
    "RECUPERADO 2025 estimado": int
})

# 5. Mostrar resultados
print("\n--- PREDICCIÓN TOTAL POR MARCA DE VEHÍCULO PARA 2025 ---")
print(tabla_final.to_string(index=False))

# 6. Crear histogramas horizontales (pueden recortarse si hay muchas marcas)
# Opcional: limitar a las 15 marcas con más robos para visualización
top_n = 15
tabla_vista = tabla_final.sort_values(by="ROBADO 2025 estimado", ascending=False).head(top_n)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 10))

# Histograma de robos
ax1.barh(tabla_vista["Marca de Vehículo"], tabla_vista["ROBADO 2025 estimado"], color='firebrick')
ax1.set_title("Robos Estimados por Marca de Vehículo (Top 15 - 2025)")
ax1.set_xlabel("Cantidad de Robos")
ax1.invert_yaxis()

# Histograma de recuperaciones
tabla_vista2 = tabla_final.sort_values(by="RECUPERADO 2025 estimado", ascending=False).head(top_n)
ax2.barh(tabla_vista2["Marca de Vehículo"], tabla_vista2["RECUPERADO 2025 estimado"], color='seagreen')
ax2.set_title("Recuperados Estimados por Marca de Vehículo (Top 15 - 2025)")
ax2.set_xlabel("Cantidad de Recuperados")
ax2.invert_yaxis()

plt.tight_layout()
plt.show()

"""PREDICCIÓN POR AÑO DE MODELO PARA 2025 DE ROBADOS Y RECUPERADOS EN ARGENTINA"""

import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt

# 1. Cargar datos
df = pd.read_csv("ROBOS_MEJORADO")  # Cambiar por tu ruta
df["tramite_fecha"] = pd.to_datetime(df["tramite_fecha"], errors='coerce')
df = df.dropna(subset=["tramite_fecha", "automotor_anio_modelo"])

# 2. Función de predicción por año de modelo
def predecir_por_anio_modelo(df, tramite_tipo):
    df_tipo = df[df["tramite_tipo"].str.upper() == tramite_tipo.upper()]
    df_tipo["fecha"] = df_tipo["tramite_fecha"].dt.to_period("M").dt.to_timestamp()

    resultados = []

    for anio in df_tipo["automotor_anio_modelo"].dropna().unique():
        df_anio = df_tipo[df_tipo["automotor_anio_modelo"] == anio]
        df_mensual = df_anio.groupby("fecha").size().reset_index(name="y")
        df_mensual.rename(columns={"fecha": "ds"}, inplace=True)

        if len(df_mensual) < 24:
            continue

        try:
            modelo = Prophet()
            modelo.fit(df_mensual)

            futuro = modelo.make_future_dataframe(periods=12, freq="MS")
            prediccion = modelo.predict(futuro)

            pred_2025 = prediccion[prediccion["ds"].dt.year == 2025]
            total_2025 = pred_2025["yhat"].sum().round()

            resultados.append({
                "Año Modelo": int(anio),
                f"{tramite_tipo} 2025 estimado": int(total_2025)
            })
        except:
            continue

    return pd.DataFrame(resultados).sort_values(by=f"{tramite_tipo} 2025 estimado", ascending=False)

# 3. Ejecutar predicción
tabla_robos = predecir_por_anio_modelo(df, "ROBADO")
tabla_recup = predecir_por_anio_modelo(df, "RECUPERADO")

# 4. Unir en una sola tabla
tabla_final = pd.merge(tabla_robos, tabla_recup, on="Año Modelo", how="outer").fillna(0).astype({
    "ROBADO 2025 estimado": int,
    "RECUPERADO 2025 estimado": int
}).sort_values(by="Año Modelo")

# 5. Mostrar tabla completa
print("\n--- PREDICCIÓN COMPLETA POR AÑO DE MODELO PARA 2025 ---")
print(tabla_final.to_string(index=False))

# 6. Visualización - Histogramas horizontales (Top 15)
top_n = 15
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 10))

# Robados
top_robos = tabla_final.sort_values(by="ROBADO 2025 estimado", ascending=False).head(top_n)
ax1.barh(top_robos["Año Modelo"].astype(str), top_robos["ROBADO 2025 estimado"], color='firebrick')
ax1.set_title("Robos Estimados por Año de Modelo (Top 15 - 2025)")
ax1.set_xlabel("Cantidad de Robos")
ax1.invert_yaxis()

# Recuperados
top_recup = tabla_final.sort_values(by="RECUPERADO 2025 estimado", ascending=False).head(top_n)
ax2.barh(top_recup["Año Modelo"].astype(str), top_recup["RECUPERADO 2025 estimado"], color='seagreen')
ax2.set_title("Recuperados Estimados por Año de Modelo (Top 15 - 2025)")
ax2.set_xlabel("Cantidad de Recuperados")
ax2.invert_yaxis()

plt.tight_layout()
plt.show()

"""PREDICCIÓN POR TIPO DE ORÍGEN PARA AÑO 2025 DE ROBADOS Y RECUPERADOS EN ARGENTINA"""

import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt

# 1. Cargar datos
df = pd.read_csv("ROBOS_MEJORADO")  # Cambiar si es necesario
df["tramite_fecha"] = pd.to_datetime(df["tramite_fecha"], errors='coerce')
df = df.dropna(subset=["tramite_fecha", "automotor_origen"])

# 2. Función para predecir por origen
def predecir_por_origen(df, tramite_tipo):
    df_tipo = df[df["tramite_tipo"].str.upper() == tramite_tipo.upper()]
    df_tipo["fecha"] = df_tipo["tramite_fecha"].dt.to_period("M").dt.to_timestamp()

    resultados = []

    for origen in df_tipo["automotor_origen"].dropna().unique():
        df_ori = df_tipo[df_tipo["automotor_origen"] == origen]
        df_mensual = df_ori.groupby("fecha").size().reset_index(name="y")
        df_mensual.rename(columns={"fecha": "ds"}, inplace=True)

        if len(df_mensual) < 24:
            continue

        try:
            modelo = Prophet()
            modelo.fit(df_mensual)

            futuro = modelo.make_future_dataframe(periods=12, freq="MS")
            prediccion = modelo.predict(futuro)
            pred_2025 = prediccion[prediccion["ds"].dt.year == 2025]
            total_2025 = pred_2025["yhat"].sum().round()

            resultados.append({
                "Origen": origen,
                f"{tramite_tipo} 2025 estimado": int(total_2025)
            })
        except:
            continue

    return pd.DataFrame(resultados).sort_values(by=f"{tramite_tipo} 2025 estimado", ascending=False)

# 3. Ejecutar predicciones
tabla_robos = predecir_por_origen(df, "ROBADO")
tabla_recup = predecir_por_origen(df, "RECUPERADO")

# 4. Unir tablas
tabla_final = pd.merge(tabla_robos, tabla_recup, on="Origen", how="outer").fillna(0).astype({
    "ROBADO 2025 estimado": int,
    "RECUPERADO 2025 estimado": int
}).sort_values(by="Origen")

# 5. Mostrar tabla
print("\n--- PREDICCIÓN POR ORIGEN DE AUTOMOTOR PARA 2025 ---")
print(tabla_final.to_string(index=False))

# 6. Visualización
top_n = 15
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(18, 10))

# Robados
top_robos = tabla_final.sort_values(by="ROBADO 2025 estimado", ascending=False).head(top_n)
ax1.barh(top_robos["Origen"], top_robos["ROBADO 2025 estimado"], color='firebrick')
ax1.set_title("Robos Estimados por Origen (Top 15 - 2025)")
ax1.set_xlabel("Cantidad de Robos")
ax1.invert_yaxis()

# Recuperados
top_recup = tabla_final.sort_values(by="RECUPERADO 2025 estimado", ascending=False).head(top_n)
ax2.barh(top_recup["Origen"], top_recup["RECUPERADO 2025 estimado"], color='seagreen')
ax2.set_title("Recuperados Estimados por Origen (Top 15 - 2025)")
ax2.set_xlabel("Cantidad de Recuperados")
ax2.invert_yaxis()

plt.tight_layout()
plt.show()